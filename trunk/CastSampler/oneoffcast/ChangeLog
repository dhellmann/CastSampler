2006-11-05  Doug Hellmann  <dhellmann@racemi.com>

	* views.py (user): Allow POST or GET submission of a URL for a feed.
	(contact): Add a simple view to deal with the contact page.
	Mostly this is to get the menu bar, etc., but we will have a form
	for podcasters here, too.

2006-11-04  Doug Hellmann  <dhellmann@racemi.com>

	* templates/index.html: Update layout of new podcast list and
	include links to add, see the home page, and the feed.

	* views.py (subscriptions): When they DELETE a subscription,
	remove the relationship between the user and the podcast, then
	remove the queue items from that podcast.

	* urls.py (urlpatterns): Change add_feeds to subscriptions so we
	can use the same structure for adding and removing new feeds.

	* views.py (queue): Make sure we have an integer for the
	item_enclosure_length.

	* feeds.py (UserFeed.item_link): Add a method for item_link().

	* models.py: Use the download_cache module to retrieve feed contents.

	* views.py: Less debug logging.

	* util.py (convert_feed_to_entries): Less debug logging.

	* download_cache.py (retrieve_feed): Utility function to manage
	the cached version of the parsed feed.

	* views.py (main): Limit the recent and popular lists to 5 items each.

	* templates/index.html: Rearrange and start writing introduction copy.

2006-10-29  Doug Hellmann  <dhellmann@racemi.com>

	* views.py (remove_from_queue): Deal with removing items from the
	user's queue.

	* urls.py (urlpatterns): Add the url for a /queue/item/ so we can
	delete items from the queue.

	* models.py (QueueItem.as_dict): Include the truncated_summary as
	a different value from the full summary.

2006-10-28  Doug Hellmann  <dhellmann@racemi.com>

	* views.py (queue): Sort items by reverse order so the most recent
	appears at the top of the queue.

	* util.py (convert_feed_to_entries): Force utf-8 encoding for the
	strings, replacing invalid characters, so we know we can pull the
	data base out of the database again.

	* feeds.py (UserFeed.items): Sort items by the date they were
	added to the queue.

	* views.py (queue): If they post to the queue, they are trying to
	add something to it.

	* util.py (convert_feed_to_entries): Only add entries to the list
	if there are enclosures.

	* models.py (Podcast.as_dict): Utility method used by the views to
	obtain a representation of the podcast to send as JSON data.
	(QueueItem): Change 'description' field to 'summary'.
	(QueueItem.as_dict): Utility method used by the views to obtain a
	representation of the podcast to send as JSON data.

2006-10-24  Doug Hellmann  <dhellmann@racemi.com>

	* views.py (external): Add the podcast id to the response to be
	consistent with feed_list.

2006-10-22  Doug Hellmann  <dhellmann@racemi.com>

	* views.py (external): Add a view to fetch and parse the feed
	contents.
	(feed_list): Add the feed url to the response.
	(external): Add the feed url to the response.

	* urls.py (urlpatterns): Add /external/ URL for "proxying" to get
	the feed contents.

	* models.py (Podcast.get_current_feed_contents): New method to
	fetch and parse the podcast feed.

	* views.py (add_feed): Add the parsed entries to the response.

	* util.py (convert_feed_to_entries): Utility function to drop some
	of the data from the parsed feed, and strip HTML from strings
	before returning to be encoded via JSON.
	(strip_html): Imported from
	http://effbot.org/zone/re-sub.htm#strip-html.

	* views.py (feed_): Change feedlist to feed_list.

	* urls.py (urlpatterns): Change /feedlist/ to /feed_list/.

2006-10-21  Doug Hellmann  <dhellmann@racemi.com>

	* views.py (feedlist): New view to provide json data about the
	list of feeds for a user.
	(add_feed): Include podcast_home in the response.

	* urls.py (urlpatterns): Add the /feedlist/ url for seeing the list of
	feeds for a user.

	* templates/user.html: Add a link to the rss feed so
	auto-detection works.  Show the list of feeds for the user on load
	instead of as part of the template.

	* templates/two_columns.html: Add a head block.

	* feeds.py (UserFeed): Change OneOffCast to CastSampler in a few
	places.

	* views.py (queue): New view to show the contents of a user's queue.

	* util.py: Move decorators and other utitlies out of the views module.

	* urls.py (urlpatterns): Add /queue/.

	* templates/user.html: Load the queue contents in an onload
	callback.  Use the feed icon instead of saying RSS or ATOM.

	* models.py (QueueItem.get_truncated_description): Add a method to
	produce a truncated version of the description.  This should
	eventually strip HTML, too.

2006-10-15  Doug Hellmann  <dhellmann@racemi.com>

	* models.py (Podcast): Change ignore to allowed.

	* templates/feed_title.html: Prefix the title for each entry with
	the original podcast name.

	* templates/feed_description.html: Add the original podcast name
	and home page link to the description of every item in the queue.

2006-10-14  Doug Hellmann  <dhellmann@racemi.com>

	* feeds.py (UserFeed): Add methods for missing values required by
	Atom feed.

	* models.py (QueueItem): Rearrange fields in admin screens.  Add
	list filter for user.

2006-10-08  Doug Hellmann  <dhellmann@racemi.com>

	* templates/user.html: Move error message handling into the
	base.html template.

	* views.py (newfunc): Decorator for view functions which use JSON.
	(add_feed): Use the jsonView decorator.

	* templates/user.html: Evaluate the return value as a JSON payload
	and alert the user to errors.

	* models.py (find_or_create_podcast): Raise more specific errors
	when we do not find information we expect.

2006-10-07  Doug Hellmann  <dhellmann@racemi.com>

	* views.py (add_feed): Change show_feed_contents to add_feed.

	* urls.py (urlpatterns): Change show_feed_contents to add_feed.

	* templates/user.html: Change show_feed_contents to add_feed.

	* forms.py (AddFeedForm.__init__): Rename class to reflect its
	true use.

	* views.py (show_feed_contents): Provide a user for
	ShowFeedContentsForm.

	* templates/user.html: Show the podcasts associated with the user.

	* models.py (Podcast): Add many-to-many relationship between
	podcasts and users.
	(find_or_create_podcast): Make sure there is a relationship
	between the user and podcast.

	* forms.py (ShowFeedContentsForm.save): Move the real logic into
	find_or_create_podcast in the models module.
	(ShowFeedContentsForm.__init__): We may need a user to save the
	new podcast.
	(ShowFeedContentsForm.save): Pass our user to
	find_or_create_podcast.

	* models.py (find_or_create_podcast): New function with logic
	moved from the forms module.

	* views.py (show_feed_contents): The manipulator save method
	returns the Podcast and the parsed data from the feed.

	* models.py (QueueItem): Add author_name and author_email fields.

	* forms.py (ShowFeedContentsForm.save): Use feedparser to pull
	data from the feed and store it in the db.  Return the Podcast
	instance and the parsed data.

2006-10-01  Doug Hellmann  <dhellmann@racemi.com>

	* templates/user.html: Use wipeIn/wipeOut instead of just setting
	the inner html.

	* views.py (show_feed_contents): Log any errors from the form
	validation and return error text containing those error messages.

	* templates/user.html: Rename callback to make the name unique.

	* templates/two_columns.html: Add a status message div.

	* forms.py (ShowFeedContentsForm): New class to manage input
	fields in the show_feed_contents form.

	* views.py (user): Add some form handling for the
	show_feed_contents form.
	(newfunc): Simplistic decorator to trap exceptions and convert
	them to error messages.
	(show_feed_contents): Start a view to show the items in a feed
	submitted by the user.

	* urls.py (urlpatterns): Add show_feed_contents before the generic
	user home page view.  Make the regex for username more strict.

	* templates/user.html: Add a form and some javascript to show the
	contents of a feed if the user enters a URL.

2006-09-30  Doug Hellmann  <dhellmann@racemi.com>

	* templates/user.html: Add classes to the parts of the queue listing.

	* templates/index.html: Switch to 2 columns.

	* templates/three_columns.html: Move global template into this app.

	* urls.py (feeds): Add rss feed info and update class for atom feeds.

	* templates/user.html: Add links for atom and rss feeds.

	* feeds.py (UserFeed): Add title and description templates.
	(UserFeed.title): Tweak formatting of feed title.
	(AtomFeed): New class to produce an ATOM feed, since we will
	support multiple formats.
	(UserFeed.items): New class to produce the RSS feed.

	* templates/feed_title.html: New template to show the title of a
	queue item in a feed.

	* templates/feed_description.html: New template to show the
	description of a queue item in a feed.

	* views.py (user): Sort by add_date order, not reversed.

	* templates/user.html: Use user instead of user.username.

	* views.py (user_redirect): Rename login_redirect.  Add a
	urlBase argument.

	* urls.py (urlpatterns): Add a URL pattern for when the input URL
	does not include the user name.

	* views.py (user_redirect): Allow callers to specify where the
	cast URL should go.

	* urls.py (urlpatterns): Remove project name from pattern prefix.

	* views.py: Update the template references so they match now that
	they are in the app templates directory.

	* templates/*.html: Move templates here from the project templates
	directory.

